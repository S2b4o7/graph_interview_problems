#include <bits/stdc++.h> 
using namespace std;

int dfs(int sr,int sc,vector<vector<int>>grid,vector<vector<int>>&distance,vector<vector<int>>&path_visited,int m,int n)
{
	if(sr<0 || sc<0 || sr>=m || sc>=n || path_visited[sr][sc] || grid[sr][sc]==0)
	return 1e6;
	if(grid[sr][sc]==2)return 0;
	
	path_visited[sr][sc]=1;
	int mn=1e6;
	mn=min(mn,dfs(sr-1,sc,grid,distance,path_visited,m,n));
	mn=min(mn,dfs(sr+1,sc,grid,distance,path_visited,m,n));
	mn=min(mn,dfs(sr,sc-1,grid,distance,path_visited,m,n));
	mn=min(mn,dfs(sr,sc+1,grid,distance,path_visited,m,n));
    path_visited[sr][sc]=false;
	if(mn!=1e6)
	return mn+1;
	return 1e6;

}







int ninjaMaster(vector<vector<int>>grid, int n, int m) {
	
	vector<vector<int>>distance(n,vector<int>(m,-1));
	vector<vector<int>>path_visited(n,vector<int>(m,0));

	int sr,sc;

	for(int i=0;i<n;i++)
	{
		int j;
		for(j=0;j<m;j++)
		{
			if(grid[i][j]==-1)
			{
				
				sr=i,sc=j;

				break;
			}
		}
		if(j!=m)
		{
			break;
		}
	}



	int min_distance=dfs(sr,sc,grid,distance,path_visited,n,m);
	if(min_distance==1e6) return -1;
	return min_distance;
	
}
